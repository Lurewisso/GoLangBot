 Telegram RAG Bot

 Структура проекта:

 Корневая директория
`go.mod` - зависимости проекта (какие библиотеки использую)
`Dockerfile` - сборка Docker образа
`.env` - настройки и токены (скрыл в гитигноре)
`docker-compose.yml` - для взаимодействия контейнеров
`textForcmd` - не люблю когда много текста в файле с основным кодом, вынес набор основных топиков в отдельный файл


ИИ:
`internal/ai/ai.go` - общие правила для всех AI-провайдеров
`internal/ai/openrouter.go` - работа с DeepSeek через OpenRouter(https://openrouter.ai/deepseek/deepseek-chat-v3.1:free/api)
`internal/ai/deepseek.go` - работа напрямую с DeepSeek API
`internal/ai/mock.go` - заглушка для тестирования без интернета

 RAG:
`internal/rag/vector_store.go` - хранилище документов и поиск по смыслу
`internal/rag/rag_pipeline.go` - основной процесс: поиск + генерация ответа

обработка хендлеров:
`internal/bot/telegram.go`- всё общение с пользователем, команды, сообщения

Настройки
`internal/config/config.go` - загрузка настроек из .env файла

Суть работы:

1. Пользователь пишет вопрос в Telegram
2. Бот ищет похожие документы в своей базе знаний
3. Найденная информация отправляется в ИИ
4. AI генерирует ответ на основе контекста
5. Бот отправляет ответ пользователю

Команды бота:

`/start` - приветствие
`/help` - помощь
`/ask` - задать вопрос ИИ
`/rag_stats` - статистика базы знаний (тест)
`/rag_add ` - добавить документ в базу(тест)

Стэк:

- Go (backend)
- Telegram Bot API
- DeepSeek ИИ через OpenRouter
- Векторный поиск
- Docker
- VPS (использовал beget.com vps - 7р/день - 1 ядро, 1гб оперативки, 10 гб памяти)

