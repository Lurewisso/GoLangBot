package ai

import "strings"

type MockClient struct {
	APIKey string
}

func NewMockClient(apiKey string) *MockClient {
	return &MockClient{
		APIKey: apiKey,
	}
}

func (c *MockClient) Ask(question string) (string, error) {
	responses := map[string]string{
		"–ø—Ä–∏–≤–µ—Ç":     "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª AI –¥–ª—è –æ—Ç–≤–µ—Ç–∞.",
		"–∫–∞–∫ –¥–µ–ª–∞":   "ü§ñ –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è —Ä–∞–±–æ—Ç–∞—é –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.",
		"rag":        "üîç RAG (Retrieval-Augmented Generation) - —ç—Ç–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è, –∫–æ—Ç–æ—Ä–∞—è —É–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã AI, –∏—Å–ø–æ–ª—å–∑—É—è –ø–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π –ø–µ—Ä–µ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–∞.",
		"–±–æ—Ç":        "–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –Ω–∞ Go, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.",
		"–ø–æ–≥–æ–¥–∞":     "üå§Ô∏è –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ.",
		"deepseek":   "DeepSeek - —ç—Ç–æ –º–æ—â–Ω–∞—è AI –º–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.",
		"openrouter": "OpenRouter - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º.",
		"–∫–æ–º–∞–Ω–¥—ã":    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: /start, /help, /ask, /info",
	}

	question = strings.ToLower(question)
	for key, response := range responses {
		if strings.Contains(question, key) {
			return response, nil
		}
	}

	return "ü§î –Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à –≤–æ–ø—Ä–æ—Å: '" + question + "'. –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —è –±—ã –æ—Ç–ø—Ä–∞–≤–∏–ª –µ–≥–æ –≤ AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.", nil
}
