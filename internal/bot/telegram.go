package bot

import (
	"GolangtgBot/internal/ai"
	"GolangtgBot/internal/rag"
	"fmt"
	"log"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type TelegramBot struct {
	bot         *tgbotapi.BotAPI
	aiClient    ai.AIClient
	ragPipeline *rag.RAGPipeline
	debugMode   bool
}

func NewBot(token string, aiClient ai.AIClient, debug bool) (*TelegramBot, error) {
	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
	}

	bot.Debug = debug
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ %s", bot.Self.UserName)

	ragPipeline := rag.NewRAGPipeline()

	return &TelegramBot{
		bot:         bot,
		aiClient:    aiClient,
		ragPipeline: ragPipeline,
		debugMode:   debug,
	}, nil
}

func (tb *TelegramBot) Start() {
	commands := []tgbotapi.BotCommand{
		{
			Command:     "start",
			Description: "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞",
		},
		{
			Command:     "help",
			Description: "–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º",
		},
		{
			Command:     "ask",
			Description: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å AI",
		},
		{
			Command:     "info",
			Description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ",
		},
		{
			Command:     "rag_stats",
			Description: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ RAG –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π",
		},
		{
			Command:     "rag_add",
			Description: "–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π",
		},
	}

	config := tgbotapi.NewSetMyCommands(commands...)
	_, err := tb.bot.Request(config)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–º–∞–Ω–¥: %v", err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := tb.bot.GetUpdatesChan(u)

	log.Println(statusBotOK)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		go tb.handleUpdate(update)
	}
}

func (tb *TelegramBot) handleUpdate(update tgbotapi.Update) {
	if update.Message != nil {
		tb.handleMessage(update.Message)
	}
}

func (tb *TelegramBot) handleMessage(message *tgbotapi.Message) {
	log.Printf("[%s] %s", message.From.UserName, message.Text)

	if message.IsCommand() {
		tb.handleCommand(message)
		return
	}

	tb.handleAIQuestion(message)
}

func (tb *TelegramBot) handleCommand(message *tgbotapi.Message) {
	switch message.Command() {
	case "start":
		tb.handleStartCommand(message)
	case "help":
		tb.handleHelpCommand(message)
	case "ask":
		tb.handleAskCommand(message)
	case "info":
		tb.handleInfoCommand(message)
	case "rag_stats":
		tb.handleRAGStatsCommand(message)
	case "rag_add":
		tb.handleRAGAddCommand(message)
	default:
		tb.handleUnknownCommand(message)
	}
}

func (tb *TelegramBot) handleStartCommand(message *tgbotapi.Message) {
	text := greeting

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	//msg.ParseMode = "Markdown"
	msg.ReplyToMessageID = message.MessageID

	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleHelpCommand(message *tgbotapi.Message) {
	text := commandHelper

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	//msg.ParseMode = "Markdown"
	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleAskCommand(message *tgbotapi.Message) {
	question := strings.TrimSpace(strings.TrimPrefix(message.Text, "/ask"))

	if question == "" {
		text := waitYourASK
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		//msg.ParseMode = "Markdown"
		tb.bot.Send(msg)
		return
	}

	tb.processAIQuestion(message, question)
}

func (tb *TelegramBot) handleInfoCommand(message *tgbotapi.Message) {
	text := aboutBotInfo

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	//msg.ParseMode = "Markdown"
	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleRAGStatsCommand(message *tgbotapi.Message) {
	stats := tb.ragPipeline.GetStats()

	text := fmt.Sprintf(`üìä *RAG Statistics*

‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ: %d
‚Ä¢ –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: %d
‚Ä¢ –†–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: %s

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /rag_add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.`,

		stats["total_documents"],
		stats["vocabulary_size"],
		stats["store_size"])

	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	//msg.ParseMode = "Markdown"
	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleRAGAddCommand(message *tgbotapi.Message) {
	content := strings.TrimSpace(strings.TrimPrefix(message.Text, "/rag_add"))

	if content == "" {
		text := rag_db_add
		msg := tgbotapi.NewMessage(message.Chat.ID, text)
		//msg.ParseMode = "Markdown"
		tb.bot.Send(msg)
		return
	}

	docID := tb.ragPipeline.AddDocument(content)

	text := fmt.Sprintf("‚úÖ –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π\n\nID: `%s`\n–¢–µ–∫—Å—Ç: %s", docID, content)
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	//msg.ParseMode = "Markdown"
	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleUnknownCommand(message *tgbotapi.Message) {
	text := unknownCommand
	msg := tgbotapi.NewMessage(message.Chat.ID, text)
	tb.bot.Send(msg)
}

func (tb *TelegramBot) handleAIQuestion(message *tgbotapi.Message) {
	tb.processAIQuestion(message, message.Text)
}

func (tb *TelegramBot) splitMessage(text string, maxLength int) []string {
	if len(text) <= maxLength {
		return []string{text}
	}

	var parts []string
	currentPart := ""

	sentences := strings.Split(text, ". ")

	for _, sentence := range sentences {
		if len(sentence) > maxLength {
			if currentPart != "" {
				parts = append(parts, currentPart)
				currentPart = ""
			}
			for len(sentence) > 0 {
				if len(sentence) <= maxLength {
					parts = append(parts, sentence)
					break
				}

				breakIndex := strings.LastIndex(sentence[:maxLength], " ")
				if breakIndex == -1 {
					breakIndex = maxLength
				}

				parts = append(parts, sentence[:breakIndex])
				sentence = sentence[breakIndex:]
				sentence = strings.TrimSpace(sentence)
			}
		} else if len(currentPart)+len(sentence)+2 <= maxLength {
			if currentPart != "" {
				currentPart += ". " + sentence
			} else {
				currentPart = sentence
			}
		} else {
			if currentPart != "" {
				parts = append(parts, currentPart+".")
				currentPart = sentence
			}
		}
	}

	if currentPart != "" {
		parts = append(parts, currentPart)
	}

	return parts
}

func (tb *TelegramBot) sendSplitMessage(chatID int64, text string, replyToMessageID int) {
	maxLength := 3800

	parts := tb.splitMessage(text, maxLength)

	for i, part := range parts {
		msg := tgbotapi.NewMessage(chatID, part)

		if i == 0 {
			msg.ReplyToMessageID = replyToMessageID
		}

		if len(parts) > 1 {
			part = fmt.Sprintf("üìÑ [%d/%d]\n\n%s", i+1, len(parts), part)
			msg.Text = part
		}

		if _, err := tb.bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è %d: %v", i+1, err)
		}
	}
}

func (tb *TelegramBot) processAIQuestion(message *tgbotapi.Message, question string) {
	chatAction := tgbotapi.NewChatAction(message.Chat.ID, tgbotapi.ChatTyping)
	tb.bot.Send(chatAction)

	ragContext, foundDocs := tb.ragPipeline.ProcessQuery(question)

	log.Printf("RAG –Ω–∞—à–µ–ª %d —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è: %s", len(foundDocs), question)

	var prompt string
	if len(foundDocs) > 0 {
		prompt = ragContext + "\n\n–ù–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤—ã—à–µ, –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: " + question + "\n\n–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. " +
			"–ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –Ω–µ—Ç —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è."
	} else {
		prompt = "–í–æ–ø—Ä–æ—Å: " + question + "\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º."
	}

	answer, err := tb.aiClient.Ask(prompt)
	if err != nil {
		log.Printf("–ò–ò –æ—à–∏–±–∫–∞: %v", err)

		errorMessage := errorRequest

		if strings.Contains(err.Error(), "401") {
			errorMessage += "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
		} else if strings.Contains(err.Error(), "429") {
			errorMessage += "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
		} else if strings.Contains(err.Error(), "402") {
			errorMessage += "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É API."
		} else if strings.Contains(err.Error(), "no response") {
			errorMessage += "–ò–ò –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å."
		} else {
			errorMessage += "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + err.Error()
		}

		msg := tgbotapi.NewMessage(message.Chat.ID, errorMessage)
		msg.ReplyToMessageID = message.MessageID
		tb.bot.Send(msg)
		return
	}

	var prefix string
	if len(foundDocs) > 0 {
		prefix = "üîç *–ù–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π:*\n\n"
	} else {
		prefix = "ü§ñ *–û—Ç–≤–µ—Ç:*\n\n"
	}

	fullAnswer := prefix + answer

	tb.sendSplitMessage(message.Chat.ID, fullAnswer, message.MessageID)
}
